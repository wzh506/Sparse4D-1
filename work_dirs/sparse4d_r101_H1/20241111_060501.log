2024-11-11 06:05:01,239 - mmdet - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.18 (default, Sep 11 2023, 13:40:15) [GCC 11.2.0]
CUDA available: True
GPU 0,1,2,3: NVIDIA L20
CUDA_HOME: /usr/local/cuda-11.7
NVCC: Cuda compilation tools, release 11.7, V11.7.99
GCC: gcc (Ubuntu 9.4.0-1ubuntu1~20.04.1) 9.4.0
PyTorch: 1.10.0
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) oneAPI Math Kernel Library Version 2023.1-Product Build 20230303 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX512
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_61,code=sm_61;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86;-gencode;arch=compute_37,code=compute_37
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.0
OpenCV: 4.8.1
MMCV: 1.5.0
MMCV Compiler: GCC 9.4
MMCV CUDA Compiler: 11.7
MMDetection: 2.25.1
MMSegmentation: 0.25.0
MMDetection3D: 1.0.0rc0+db711ad
------------------------------------------------------------

2024-11-11 06:05:05,478 - mmdet - INFO - Distributed training: False
2024-11-11 06:05:09,718 - mmdet - INFO - Config:
checkpoint_config = dict(interval=6)
log_config = dict(
    interval=50,
    hooks=[dict(type='TextLoggerHook'),
           dict(type='TensorboardLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
work_dir = 'work_dirs/sparse4d_r101_H1'
load_from = 'fcos3d.pth'
resume_from = None
workflow = [('train', 1)]
plugin = True
plugin_dir = 'projects/mmdet3d_plugin/'
fp16 = dict(loss_scale=32.0)
optimizer = dict(
    type='AdamW',
    lr=0.0002,
    paramwise_cfg=dict(custom_keys=dict(img_backbone=dict(lr_mult=0.1))),
    weight_decay=0.01)
optimizer_config = dict(grad_clip=dict(max_norm=35, norm_type=2))
lr_config = dict(
    policy='CosineAnnealing',
    warmup='linear',
    warmup_iters=500,
    warmup_ratio=0.3333333333333333,
    min_lr_ratio=0.001)
class_names = [
    'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
    'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
]
num_classes = 10
embed_dims = 256
num_groups = 8
num_decoder = 6
model = dict(
    type='Sparse4D',
    use_grid_mask=True,
    img_backbone=dict(
        type='ResNet',
        depth=101,
        num_stages=4,
        frozen_stages=1,
        norm_eval=True,
        style='caffe',
        with_cp=True,
        out_indices=(0, 1, 2, 3),
        stage_with_dcn=(False, False, True, True),
        norm_cfg=dict(type='BN2d', requires_grad=False),
        dcn=dict(type='DCNv2', deform_groups=1, fallback_on_stride=False)),
    img_neck=dict(
        type='FPN',
        num_outs=4,
        start_level=1,
        out_channels=256,
        add_extra_convs='on_output',
        relu_before_extra_convs=True,
        in_channels=[256, 512, 1024, 2048]),
    head=dict(
        type='Sparse4DHead',
        cls_threshold_to_reg=0.05,
        num_decoder=6,
        instance_bank=dict(
            type='InstanceBank',
            num_anchor=900,
            embed_dims=256,
            anchor='nuscenes_kmeans900.npy',
            anchor_handler=dict(type='SparseBox3DKeyPointsGenerator')),
        anchor_encoder=dict(
            type='SparseBox3DEncoder', embed_dims=256, vel_dims=3),
        graph_model=dict(
            type='MultiheadAttention',
            embed_dims=256,
            num_heads=8,
            batch_first=True,
            dropout=0.1),
        norm_layer=dict(type='LN', normalized_shape=256),
        ffn=dict(
            type='FFN',
            embed_dims=256,
            feedforward_channels=512,
            num_fcs=2,
            ffn_drop=0.1,
            act_cfg=dict(type='ReLU', inplace=True)),
        deformable_model=dict(
            type='DeformableFeatureAggregation',
            embed_dims=256,
            num_groups=8,
            num_levels=4,
            num_cams=6,
            proj_drop=0.1,
            kps_generator=dict(
                type='SparseBox3DKeyPointsGenerator',
                num_learnable_pts=6,
                fix_scale=[[0, 0, 0], [0.45, 0, 0], [-0.45, 0, 0],
                           [0, 0.45, 0], [0, -0.45, 0], [0, 0, 0.45],
                           [0, 0, -0.45]])),
        refine_layer=dict(
            type='SparseBox3DRefinementModule', embed_dims=256, num_cls=10),
        sampler=dict(
            type='SparseBox3DTarget',
            cls_weight=2.0,
            box_weight=0.25,
            reg_weights=[2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
            cls_wise_reg_weights=dict(
                {9: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0]})),
        loss_cls=dict(
            type='FocalLoss',
            use_sigmoid=True,
            gamma=2.0,
            alpha=0.25,
            loss_weight=2.0),
        loss_reg=dict(type='L1Loss', loss_weight=0.25),
        gt_cls_key='gt_labels_3d',
        gt_reg_key='gt_bboxes_3d',
        decoder=dict(type='SparseBox3DDecoder'),
        reg_weights=[2.0, 2.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],
        kps_generator=dict(
            type='SparseBox3DKeyPointsGenerator',
            fix_scale=[[0, 0, 0], [0.45, 0, 0], [-0.45, 0, 0], [0, 0.45, 0],
                       [0, -0.45, 0], [0, 0, 0.45], [0, 0, -0.45]]),
        depth_module=dict(type='DepthReweightModule', embed_dims=256)))
dataset_type = 'NuScenes3DDetTrackDataset'
data_root = 'data/nuscenes/'
anno_root = 'data/nuscenes_cam/'
file_client_args = dict(backend='disk')
img_crop_range = [260, 900, 0, 1600]
img_norm_cfg = dict(
    mean=[103.53, 116.28, 123.675], std=[1.0, 1.0, 1.0], to_rgb=False)
train_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(type='CustomCropMultiViewImage', crop_range=[260, 900, 0, 1600]),
    dict(type='PhotoMetricDistortionMultiViewImage'),
    dict(
        type='NormalizeMultiviewImage',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(
        type='LoadAnnotations3D',
        with_bbox_3d=True,
        with_label_3d=True,
        with_attr_label=False),
    dict(
        type='CircleObjectRangeFilter',
        class_dist_thred=[55, 55, 55, 55, 55, 55, 55, 55, 55, 55]),
    dict(
        type='ObjectNameFilter',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ]),
    dict(type='NuScenesSparse4DAdaptor'),
    dict(
        type='Collect3D',
        keys=[
            'gt_bboxes_3d', 'gt_labels_3d', 'img', 'timestamp',
            'projection_mat', 'image_wh'
        ],
        meta_keys=['timestamp', 'T_global', 'T_global_inv'])
]
test_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(type='CustomCropMultiViewImage', crop_range=[260, 900, 0, 1600]),
    dict(
        type='NormalizeMultiviewImage',
        mean=[103.53, 116.28, 123.675],
        std=[1.0, 1.0, 1.0],
        to_rgb=False),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='NuScenesSparse4DAdaptor'),
    dict(
        type='Collect3D',
        keys=['img', 'timestamp', 'projection_mat', 'image_wh'],
        meta_keys=['timestamp', 'T_global', 'T_global_inv'])
]
input_modality = dict(
    use_lidar=False,
    use_camera=True,
    use_radar=False,
    use_map=False,
    use_external=False)
data_basic_config = dict(
    type='NuScenes3DDetTrackDataset',
    data_root='data/nuscenes/',
    classes=[
        'car', 'truck', 'construction_vehicle', 'bus', 'trailer', 'barrier',
        'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
    ],
    modality=dict(
        use_lidar=False,
        use_camera=True,
        use_radar=False,
        use_map=False,
        use_external=False),
    box_type_3d='LiDAR',
    version='v1.0-trainval')
data = dict(
    samples_per_gpu=1,
    workers_per_gpu=2,
    train=dict(
        type='NuScenes3DDetTrackDataset',
        data_root='data/nuscenes/',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        box_type_3d='LiDAR',
        version='v1.0-trainval',
        ann_file='data/nuscenes_cam/nuscenes_infos_train.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='CustomCropMultiViewImage',
                crop_range=[260, 900, 0, 1600]),
            dict(type='PhotoMetricDistortionMultiViewImage'),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(
                type='LoadAnnotations3D',
                with_bbox_3d=True,
                with_label_3d=True,
                with_attr_label=False),
            dict(
                type='CircleObjectRangeFilter',
                class_dist_thred=[55, 55, 55, 55, 55, 55, 55, 55, 55, 55]),
            dict(
                type='ObjectNameFilter',
                classes=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ]),
            dict(type='NuScenesSparse4DAdaptor'),
            dict(
                type='Collect3D',
                keys=[
                    'gt_bboxes_3d', 'gt_labels_3d', 'img', 'timestamp',
                    'projection_mat', 'image_wh'
                ],
                meta_keys=['timestamp', 'T_global', 'T_global_inv'])
        ],
        test_mode=False),
    val=dict(
        type='NuScenes3DDetTrackDataset',
        data_root='data/nuscenes/',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        box_type_3d='LiDAR',
        version='v1.0-trainval',
        ann_file='data/nuscenes_cam/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='CustomCropMultiViewImage',
                crop_range=[260, 900, 0, 1600]),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(type='NuScenesSparse4DAdaptor'),
            dict(
                type='Collect3D',
                keys=['img', 'timestamp', 'projection_mat', 'image_wh'],
                meta_keys=['timestamp', 'T_global', 'T_global_inv'])
        ],
        test_mode=True),
    test=dict(
        type='NuScenes3DDetTrackDataset',
        data_root='data/nuscenes/',
        classes=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        modality=dict(
            use_lidar=False,
            use_camera=True,
            use_radar=False,
            use_map=False,
            use_external=False),
        box_type_3d='LiDAR',
        version='v1.0-trainval',
        ann_file='data/nuscenes_cam/nuscenes_infos_val.pkl',
        pipeline=[
            dict(type='LoadMultiViewImageFromFiles', to_float32=True),
            dict(
                type='CustomCropMultiViewImage',
                crop_range=[260, 900, 0, 1600]),
            dict(
                type='NormalizeMultiviewImage',
                mean=[103.53, 116.28, 123.675],
                std=[1.0, 1.0, 1.0],
                to_rgb=False),
            dict(
                type='DefaultFormatBundle3D',
                class_names=[
                    'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                    'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                    'traffic_cone'
                ],
                with_label=False),
            dict(type='NuScenesSparse4DAdaptor'),
            dict(
                type='Collect3D',
                keys=['img', 'timestamp', 'projection_mat', 'image_wh'],
                meta_keys=['timestamp', 'T_global', 'T_global_inv'])
        ],
        test_mode=True))
vis_pipeline = [
    dict(type='LoadMultiViewImageFromFiles', to_float32=True),
    dict(
        type='DefaultFormatBundle3D',
        class_names=[
            'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
            'barrier', 'motorcycle', 'bicycle', 'pedestrian', 'traffic_cone'
        ],
        with_label=False),
    dict(type='Collect3D', keys=['img'], meta_keys=['timestamp', 'lidar2img'])
]
total_epochs = 24
evaluation = dict(
    interval=24,
    pipeline=[
        dict(type='LoadMultiViewImageFromFiles', to_float32=True),
        dict(
            type='DefaultFormatBundle3D',
            class_names=[
                'car', 'truck', 'construction_vehicle', 'bus', 'trailer',
                'barrier', 'motorcycle', 'bicycle', 'pedestrian',
                'traffic_cone'
            ],
            with_label=False),
        dict(
            type='Collect3D',
            keys=['img'],
            meta_keys=['timestamp', 'lidar2img'])
    ])
runner = dict(type='EpochBasedRunner', max_epochs=24)
gpu_ids = range(0, 1)

2024-11-11 06:05:09,719 - mmdet - INFO - Set random seed to 0, deterministic: False
2024-11-11 06:05:34,881 - mmdet - INFO - initialize ResNet with init_cfg [{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2024-11-11 06:05:35,095 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,098 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,101 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,105 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,109 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,112 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,114 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,120 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,127 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,133 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,139 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,145 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,151 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,157 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,163 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,170 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,176 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,182 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,189 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,195 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,201 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,208 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,214 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,220 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,226 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,232 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,238 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,244 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,250 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,257 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,281 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,296 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,310 - mmdet - INFO - initialize Bottleneck with init_cfg {'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
2024-11-11 06:05:35,354 - mmdet - INFO - initialize FPN with init_cfg {'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
Name of parameter - Initialization information

img_backbone.conv1.weight - torch.Size([64, 3, 7, 7]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.0.conv1.weight - torch.Size([64, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.0.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.0.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.0.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.0.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.0.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.0.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.0.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

img_backbone.layer1.0.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.0.downsample.0.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.0.downsample.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.0.downsample.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.1.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.1.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.1.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.1.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.1.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.1.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.1.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.1.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

img_backbone.layer1.1.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.2.conv1.weight - torch.Size([64, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.2.bn1.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.2.bn1.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.2.conv2.weight - torch.Size([64, 64, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.2.bn2.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.2.bn2.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer1.2.conv3.weight - torch.Size([256, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer1.2.bn3.weight - torch.Size([256]): 
ConstantInit: val=0, bias=0 

img_backbone.layer1.2.bn3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.0.conv1.weight - torch.Size([128, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.0.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.0.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.0.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.0.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.0.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.0.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.0.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

img_backbone.layer2.0.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.0.downsample.0.weight - torch.Size([512, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.0.downsample.1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.0.downsample.1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.1.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.1.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.1.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.1.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.1.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.1.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.1.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.1.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

img_backbone.layer2.1.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.2.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.2.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.2.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.2.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.2.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.2.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.2.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.2.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

img_backbone.layer2.2.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.3.conv1.weight - torch.Size([128, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.3.bn1.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.3.bn1.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.3.conv2.weight - torch.Size([128, 128, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.3.bn2.weight - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.3.bn2.bias - torch.Size([128]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer2.3.conv3.weight - torch.Size([512, 128, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer2.3.bn3.weight - torch.Size([512]): 
ConstantInit: val=0, bias=0 

img_backbone.layer2.3.bn3.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.0.conv1.weight - torch.Size([256, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.0.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.0.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.0.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.0.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.0.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.0.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.0.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.0.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.0.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.0.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.0.downsample.0.weight - torch.Size([1024, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.0.downsample.1.weight - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.0.downsample.1.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.1.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.1.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.1.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.1.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.1.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.1.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.1.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.1.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.1.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.1.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.1.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.2.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.2.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.2.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.2.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.2.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.2.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.2.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.2.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.2.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.2.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.2.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.3.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.3.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.3.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.3.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.3.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.3.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.3.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.3.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.3.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.3.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.3.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.4.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.4.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.4.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.4.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.4.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.4.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.4.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.4.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.4.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.4.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.4.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.5.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.5.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.5.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.5.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.5.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.5.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.5.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.5.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.5.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.5.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.5.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.6.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.6.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.6.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.6.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.6.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.6.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.6.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.6.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.6.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.6.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.6.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.7.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.7.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.7.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.7.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.7.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.7.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.7.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.7.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.7.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.7.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.7.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.8.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.8.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.8.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.8.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.8.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.8.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.8.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.8.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.8.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.8.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.8.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.9.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.9.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.9.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.9.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.9.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.9.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.9.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.9.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.9.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.9.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.9.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.10.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.10.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.10.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.10.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.10.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.10.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.10.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.10.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.10.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.10.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.10.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.11.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.11.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.11.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.11.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.11.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.11.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.11.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.11.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.11.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.11.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.11.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.12.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.12.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.12.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.12.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.12.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.12.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.12.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.12.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.12.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.12.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.12.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.13.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.13.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.13.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.13.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.13.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.13.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.13.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.13.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.13.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.13.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.13.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.14.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.14.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.14.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.14.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.14.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.14.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.14.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.14.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.14.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.14.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.14.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.15.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.15.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.15.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.15.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.15.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.15.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.15.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.15.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.15.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.15.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.15.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.16.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.16.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.16.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.16.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.16.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.16.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.16.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.16.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.16.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.16.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.16.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.17.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.17.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.17.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.17.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.17.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.17.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.17.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.17.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.17.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.17.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.17.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.18.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.18.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.18.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.18.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.18.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.18.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.18.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.18.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.18.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.18.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.18.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.19.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.19.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.19.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.19.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.19.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.19.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.19.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.19.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.19.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.19.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.19.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.20.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.20.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.20.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.20.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.20.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.20.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.20.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.20.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.20.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.20.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.20.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.21.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.21.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.21.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.21.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.21.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.21.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.21.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.21.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.21.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.21.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.21.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.22.conv1.weight - torch.Size([256, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.22.bn1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.22.bn1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.22.conv2.weight - torch.Size([256, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.22.conv2.conv_offset.weight - torch.Size([27, 256, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer3.22.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.22.bn2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.22.bn2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer3.22.conv3.weight - torch.Size([1024, 256, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer3.22.bn3.weight - torch.Size([1024]): 
ConstantInit: val=0, bias=0 

img_backbone.layer3.22.bn3.bias - torch.Size([1024]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.0.conv1.weight - torch.Size([512, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.0.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.0.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.0.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.0.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.0.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.0.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.0.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.0.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.0.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

img_backbone.layer4.0.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.0.downsample.0.weight - torch.Size([2048, 1024, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.0.downsample.1.weight - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.0.downsample.1.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.1.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.1.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.1.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.1.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.1.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.1.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.1.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.1.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.1.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.1.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

img_backbone.layer4.1.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.2.conv1.weight - torch.Size([512, 2048, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.2.bn1.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.2.bn1.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.2.conv2.weight - torch.Size([512, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.2.conv2.conv_offset.weight - torch.Size([27, 512, 3, 3]): 
Initialized by user-defined `init_weights` in ModulatedDeformConv2dPack  

img_backbone.layer4.2.conv2.conv_offset.bias - torch.Size([27]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.2.bn2.weight - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.2.bn2.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_backbone.layer4.2.conv3.weight - torch.Size([2048, 512, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

img_backbone.layer4.2.bn3.weight - torch.Size([2048]): 
ConstantInit: val=0, bias=0 

img_backbone.layer4.2.bn3.bias - torch.Size([2048]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_neck.lateral_convs.0.conv.weight - torch.Size([256, 512, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.lateral_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_neck.lateral_convs.1.conv.weight - torch.Size([256, 1024, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.lateral_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_neck.lateral_convs.2.conv.weight - torch.Size([256, 2048, 1, 1]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.lateral_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_neck.fpn_convs.0.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.0.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_neck.fpn_convs.1.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.1.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_neck.fpn_convs.2.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.2.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

img_neck.fpn_convs.3.conv.weight - torch.Size([256, 256, 3, 3]): 
XavierInit: gain=1, distribution=uniform, bias=0 

img_neck.fpn_convs.3.conv.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.instance_bank.anchor - torch.Size([900, 11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.instance_bank.instance_feature - torch.Size([900, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.anchor_encoder.pos_fc.0.weight - torch.Size([256, 3]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.pos_fc.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.pos_fc.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.pos_fc.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.pos_fc.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.pos_fc.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.pos_fc.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.pos_fc.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.size_fc.0.weight - torch.Size([256, 3]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.size_fc.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.size_fc.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.size_fc.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.size_fc.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.size_fc.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.size_fc.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.size_fc.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.yaw_fc.0.weight - torch.Size([256, 2]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.yaw_fc.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.yaw_fc.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.yaw_fc.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.yaw_fc.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.yaw_fc.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.yaw_fc.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.yaw_fc.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.vel_fc.0.weight - torch.Size([256, 3]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.vel_fc.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.vel_fc.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.vel_fc.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.vel_fc.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.vel_fc.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.vel_fc.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.vel_fc.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.output_fc.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.output_fc.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.output_fc.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.output_fc.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.output_fc.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.output_fc.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.output_fc.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.anchor_encoder.output_fc.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.0.layers.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.0.layers.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.0.layers.1.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.0.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.1.layers.0.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.1.layers.0.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.1.layers.1.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.1.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.2.weight - torch.Size([12, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.depth_module.depth_fc.2.bias - torch.Size([12]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.0.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.0.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.0.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.0.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.1.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.2.kps_generator.learnable_fc.weight - torch.Size([18, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.2.kps_generator.learnable_fc.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.2.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.2.output_proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.2.weights_fc.weight - torch.Size([2496, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.2.weights_fc.bias - torch.Size([2496]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.3.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.4.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.4.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.4.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.4.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.5.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.7.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.10.weight - torch.Size([11, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.10.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.layers.11.scale - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.6.cls_layers.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.7.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.7.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.7.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.7.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.8.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.8.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.9.kps_generator.learnable_fc.weight - torch.Size([18, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.9.kps_generator.learnable_fc.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.9.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.9.output_proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.9.weights_fc.weight - torch.Size([2496, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.9.weights_fc.bias - torch.Size([2496]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.10.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.10.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.11.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.11.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.11.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.11.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.12.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.12.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.5.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.7.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.10.weight - torch.Size([11, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.10.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.layers.11.scale - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.13.cls_layers.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.14.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.14.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.14.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.14.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.15.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.15.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.16.kps_generator.learnable_fc.weight - torch.Size([18, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.16.kps_generator.learnable_fc.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.16.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.16.output_proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.16.weights_fc.weight - torch.Size([2496, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.16.weights_fc.bias - torch.Size([2496]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.17.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.17.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.18.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.18.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.18.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.18.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.19.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.19.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.5.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.7.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.10.weight - torch.Size([11, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.10.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.layers.11.scale - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.20.cls_layers.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.21.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.21.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.21.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.21.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.22.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.22.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.23.kps_generator.learnable_fc.weight - torch.Size([18, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.23.kps_generator.learnable_fc.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.23.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.23.output_proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.23.weights_fc.weight - torch.Size([2496, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.23.weights_fc.bias - torch.Size([2496]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.24.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.24.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.25.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.25.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.25.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.25.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.26.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.26.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.5.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.7.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.10.weight - torch.Size([11, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.10.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.layers.11.scale - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.27.cls_layers.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.28.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.28.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.28.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.28.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.29.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.29.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.30.kps_generator.learnable_fc.weight - torch.Size([18, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.30.kps_generator.learnable_fc.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.30.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.30.output_proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.30.weights_fc.weight - torch.Size([2496, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.30.weights_fc.bias - torch.Size([2496]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.31.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.31.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.32.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.32.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.32.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.32.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.33.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.33.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.5.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.7.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.10.weight - torch.Size([11, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.10.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.layers.11.scale - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.34.cls_layers.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.35.attn.in_proj_weight - torch.Size([768, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.35.attn.in_proj_bias - torch.Size([768]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.35.attn.out_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.35.attn.out_proj.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.36.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.36.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.37.kps_generator.learnable_fc.weight - torch.Size([18, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.37.kps_generator.learnable_fc.bias - torch.Size([18]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.37.output_proj.weight - torch.Size([256, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.37.output_proj.bias - torch.Size([256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.37.weights_fc.weight - torch.Size([2496, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.37.weights_fc.bias - torch.Size([2496]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.38.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.38.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.39.layers.0.0.weight - torch.Size([512, 256]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.39.layers.0.0.bias - torch.Size([512]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.39.layers.1.weight - torch.Size([256, 512]): 
Initialized by user-defined `init_weights` in Sparse4DHead  

head.layers.39.layers.1.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.40.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.40.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.2.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.4.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.4.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.5.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.7.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.7.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.9.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.9.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.10.weight - torch.Size([11, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.10.bias - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.layers.11.scale - torch.Size([11]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.0.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.0.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.2.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.2.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.3.weight - torch.Size([256, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.3.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.5.weight - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.5.bias - torch.Size([256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.6.weight - torch.Size([10, 256]): 
The value is the same before and after calling `init_weights` of Sparse4D  

head.layers.41.cls_layers.6.bias - torch.Size([10]): 
Initialized by user-defined `init_weights` in Sparse4DHead  
2024-11-11 06:05:36,290 - mmdet - INFO - Model:
Sparse4D(
  (img_backbone): ResNet(
    (conv1): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
    (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    (relu): ReLU(inplace=True)
    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
    (layer1): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(64, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer2): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        (bn2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer3): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(512, 256, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(512, 1024, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (3): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (4): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (5): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (6): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (7): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (8): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (9): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (10): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (11): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (12): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (13): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (14): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (15): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (16): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (17): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (18): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (19): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (20): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (21): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (22): Bottleneck(
        (conv1): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(256, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
    (layer4): ResLayer(
      (0): Bottleneck(
        (conv1): Conv2d(1024, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (downsample): Sequential(
          (0): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(2, 2), bias=False)
          (1): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        )
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (1): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
      (2): Bottleneck(
        (conv1): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv2): ModulatedDeformConv2dPack(
          (conv_offset): Conv2d(512, 27, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
        (bn2): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (conv3): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (bn3): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
      )
      init_cfg={'type': 'Constant', 'val': 0, 'override': {'name': 'norm3'}}
    )
  )
  init_cfg=[{'type': 'Kaiming', 'layer': 'Conv2d'}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
  (img_neck): FPN(
    (lateral_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(2048, 256, kernel_size=(1, 1), stride=(1, 1))
      )
    )
    (fpn_convs): ModuleList(
      (0): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (1): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (2): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
      )
      (3): ConvModule(
        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1))
      )
    )
  )
  init_cfg={'type': 'Xavier', 'layer': 'Conv2d', 'distribution': 'uniform'}
  (head): Sparse4DHead(
    (instance_bank): InstanceBank(
      (anchor_handler): SparseBox3DKeyPointsGenerator()
    )
    (anchor_encoder): SparseBox3DEncoder(
      (pos_fc): Sequential(
        (0): Linear(in_features=3, out_features=256, bias=True)
        (1): ReLU(inplace=True)
        (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU(inplace=True)
        (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (size_fc): Sequential(
        (0): Linear(in_features=3, out_features=256, bias=True)
        (1): ReLU(inplace=True)
        (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU(inplace=True)
        (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (yaw_fc): Sequential(
        (0): Linear(in_features=2, out_features=256, bias=True)
        (1): ReLU(inplace=True)
        (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU(inplace=True)
        (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (vel_fc): Sequential(
        (0): Linear(in_features=3, out_features=256, bias=True)
        (1): ReLU(inplace=True)
        (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU(inplace=True)
        (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
      (output_fc): Sequential(
        (0): Linear(in_features=256, out_features=256, bias=True)
        (1): ReLU(inplace=True)
        (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
        (3): Linear(in_features=256, out_features=256, bias=True)
        (4): ReLU(inplace=True)
        (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      )
    )
    (depth_module): DepthReweightModule(
      (depth_fc): Sequential(
        (0): FFN(
          (activate): ReLU(inplace=True)
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=256, out_features=256, bias=True)
              (1): ReLU(inplace=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (1): FFN(
          (activate): ReLU(inplace=True)
          (layers): Sequential(
            (0): Sequential(
              (0): Linear(in_features=256, out_features=256, bias=True)
              (1): ReLU(inplace=True)
              (2): Dropout(p=0.0, inplace=False)
            )
            (1): Linear(in_features=256, out_features=256, bias=True)
            (2): Dropout(p=0.0, inplace=False)
          )
          (dropout_layer): Identity()
        )
        (2): Linear(in_features=256, out_features=12, bias=True)
      )
    )
    (kps_generator): SparseBox3DKeyPointsGenerator()
    (loss_cls): FocalLoss()
    (loss_reg): L1Loss()
    (layers): ModuleList(
      (0): MultiheadAttention(
        (attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
        (proj_drop): Dropout(p=0.0, inplace=False)
        (dropout_layer): Dropout(p=0.1, inplace=False)
      )
      (1): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (2): DeformableFeatureAggregation(
        (proj_drop): Dropout(p=0.1, inplace=False)
        (kps_generator): SparseBox3DKeyPointsGenerator(
          (learnable_fc): Linear(in_features=256, out_features=18, bias=True)
        )
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
        (weights_fc): Linear(in_features=256, out_features=2496, bias=True)
      )
      (3): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (4): FFN(
        (activate): ReLU(inplace=True)
        (layers): Sequential(
          (0): Sequential(
            (0): Linear(in_features=256, out_features=512, bias=True)
            (1): ReLU(inplace=True)
            (2): Dropout(p=0.1, inplace=False)
          )
          (1): Linear(in_features=512, out_features=256, bias=True)
          (2): Dropout(p=0.1, inplace=False)
        )
        (dropout_layer): Identity()
      )
      (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (6): SparseBox3DRefinementModule(
        (layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
          (3): ReLU(inplace=True)
          (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (5): Linear(in_features=256, out_features=256, bias=True)
          (6): ReLU(inplace=True)
          (7): Linear(in_features=256, out_features=256, bias=True)
          (8): ReLU(inplace=True)
          (9): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (10): Linear(in_features=256, out_features=11, bias=True)
          (11): Scale()
        )
        (cls_layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=256, bias=True)
          (4): ReLU(inplace=True)
          (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (6): Linear(in_features=256, out_features=10, bias=True)
        )
      )
      (7): MultiheadAttention(
        (attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
        (proj_drop): Dropout(p=0.0, inplace=False)
        (dropout_layer): Dropout(p=0.1, inplace=False)
      )
      (8): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (9): DeformableFeatureAggregation(
        (proj_drop): Dropout(p=0.1, inplace=False)
        (kps_generator): SparseBox3DKeyPointsGenerator(
          (learnable_fc): Linear(in_features=256, out_features=18, bias=True)
        )
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
        (weights_fc): Linear(in_features=256, out_features=2496, bias=True)
      )
      (10): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (11): FFN(
        (activate): ReLU(inplace=True)
        (layers): Sequential(
          (0): Sequential(
            (0): Linear(in_features=256, out_features=512, bias=True)
            (1): ReLU(inplace=True)
            (2): Dropout(p=0.1, inplace=False)
          )
          (1): Linear(in_features=512, out_features=256, bias=True)
          (2): Dropout(p=0.1, inplace=False)
        )
        (dropout_layer): Identity()
      )
      (12): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (13): SparseBox3DRefinementModule(
        (layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
          (3): ReLU(inplace=True)
          (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (5): Linear(in_features=256, out_features=256, bias=True)
          (6): ReLU(inplace=True)
          (7): Linear(in_features=256, out_features=256, bias=True)
          (8): ReLU(inplace=True)
          (9): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (10): Linear(in_features=256, out_features=11, bias=True)
          (11): Scale()
        )
        (cls_layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=256, bias=True)
          (4): ReLU(inplace=True)
          (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (6): Linear(in_features=256, out_features=10, bias=True)
        )
      )
      (14): MultiheadAttention(
        (attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
        (proj_drop): Dropout(p=0.0, inplace=False)
        (dropout_layer): Dropout(p=0.1, inplace=False)
      )
      (15): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (16): DeformableFeatureAggregation(
        (proj_drop): Dropout(p=0.1, inplace=False)
        (kps_generator): SparseBox3DKeyPointsGenerator(
          (learnable_fc): Linear(in_features=256, out_features=18, bias=True)
        )
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
        (weights_fc): Linear(in_features=256, out_features=2496, bias=True)
      )
      (17): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (18): FFN(
        (activate): ReLU(inplace=True)
        (layers): Sequential(
          (0): Sequential(
            (0): Linear(in_features=256, out_features=512, bias=True)
            (1): ReLU(inplace=True)
            (2): Dropout(p=0.1, inplace=False)
          )
          (1): Linear(in_features=512, out_features=256, bias=True)
          (2): Dropout(p=0.1, inplace=False)
        )
        (dropout_layer): Identity()
      )
      (19): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (20): SparseBox3DRefinementModule(
        (layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
          (3): ReLU(inplace=True)
          (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (5): Linear(in_features=256, out_features=256, bias=True)
          (6): ReLU(inplace=True)
          (7): Linear(in_features=256, out_features=256, bias=True)
          (8): ReLU(inplace=True)
          (9): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (10): Linear(in_features=256, out_features=11, bias=True)
          (11): Scale()
        )
        (cls_layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=256, bias=True)
          (4): ReLU(inplace=True)
          (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (6): Linear(in_features=256, out_features=10, bias=True)
        )
      )
      (21): MultiheadAttention(
        (attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
        (proj_drop): Dropout(p=0.0, inplace=False)
        (dropout_layer): Dropout(p=0.1, inplace=False)
      )
      (22): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (23): DeformableFeatureAggregation(
        (proj_drop): Dropout(p=0.1, inplace=False)
        (kps_generator): SparseBox3DKeyPointsGenerator(
          (learnable_fc): Linear(in_features=256, out_features=18, bias=True)
        )
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
        (weights_fc): Linear(in_features=256, out_features=2496, bias=True)
      )
      (24): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (25): FFN(
        (activate): ReLU(inplace=True)
        (layers): Sequential(
          (0): Sequential(
            (0): Linear(in_features=256, out_features=512, bias=True)
            (1): ReLU(inplace=True)
            (2): Dropout(p=0.1, inplace=False)
          )
          (1): Linear(in_features=512, out_features=256, bias=True)
          (2): Dropout(p=0.1, inplace=False)
        )
        (dropout_layer): Identity()
      )
      (26): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (27): SparseBox3DRefinementModule(
        (layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
          (3): ReLU(inplace=True)
          (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (5): Linear(in_features=256, out_features=256, bias=True)
          (6): ReLU(inplace=True)
          (7): Linear(in_features=256, out_features=256, bias=True)
          (8): ReLU(inplace=True)
          (9): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (10): Linear(in_features=256, out_features=11, bias=True)
          (11): Scale()
        )
        (cls_layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=256, bias=True)
          (4): ReLU(inplace=True)
          (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (6): Linear(in_features=256, out_features=10, bias=True)
        )
      )
      (28): MultiheadAttention(
        (attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
        (proj_drop): Dropout(p=0.0, inplace=False)
        (dropout_layer): Dropout(p=0.1, inplace=False)
      )
      (29): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (30): DeformableFeatureAggregation(
        (proj_drop): Dropout(p=0.1, inplace=False)
        (kps_generator): SparseBox3DKeyPointsGenerator(
          (learnable_fc): Linear(in_features=256, out_features=18, bias=True)
        )
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
        (weights_fc): Linear(in_features=256, out_features=2496, bias=True)
      )
      (31): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (32): FFN(
        (activate): ReLU(inplace=True)
        (layers): Sequential(
          (0): Sequential(
            (0): Linear(in_features=256, out_features=512, bias=True)
            (1): ReLU(inplace=True)
            (2): Dropout(p=0.1, inplace=False)
          )
          (1): Linear(in_features=512, out_features=256, bias=True)
          (2): Dropout(p=0.1, inplace=False)
        )
        (dropout_layer): Identity()
      )
      (33): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (34): SparseBox3DRefinementModule(
        (layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
          (3): ReLU(inplace=True)
          (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (5): Linear(in_features=256, out_features=256, bias=True)
          (6): ReLU(inplace=True)
          (7): Linear(in_features=256, out_features=256, bias=True)
          (8): ReLU(inplace=True)
          (9): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (10): Linear(in_features=256, out_features=11, bias=True)
          (11): Scale()
        )
        (cls_layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=256, bias=True)
          (4): ReLU(inplace=True)
          (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (6): Linear(in_features=256, out_features=10, bias=True)
        )
      )
      (35): MultiheadAttention(
        (attn): MultiheadAttention(
          (out_proj): NonDynamicallyQuantizableLinear(in_features=256, out_features=256, bias=True)
        )
        (proj_drop): Dropout(p=0.0, inplace=False)
        (dropout_layer): Dropout(p=0.1, inplace=False)
      )
      (36): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (37): DeformableFeatureAggregation(
        (proj_drop): Dropout(p=0.1, inplace=False)
        (kps_generator): SparseBox3DKeyPointsGenerator(
          (learnable_fc): Linear(in_features=256, out_features=18, bias=True)
        )
        (output_proj): Linear(in_features=256, out_features=256, bias=True)
        (weights_fc): Linear(in_features=256, out_features=2496, bias=True)
      )
      (38): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (39): FFN(
        (activate): ReLU(inplace=True)
        (layers): Sequential(
          (0): Sequential(
            (0): Linear(in_features=256, out_features=512, bias=True)
            (1): ReLU(inplace=True)
            (2): Dropout(p=0.1, inplace=False)
          )
          (1): Linear(in_features=512, out_features=256, bias=True)
          (2): Dropout(p=0.1, inplace=False)
        )
        (dropout_layer): Identity()
      )
      (40): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
      (41): SparseBox3DRefinementModule(
        (layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): Linear(in_features=256, out_features=256, bias=True)
          (3): ReLU(inplace=True)
          (4): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (5): Linear(in_features=256, out_features=256, bias=True)
          (6): ReLU(inplace=True)
          (7): Linear(in_features=256, out_features=256, bias=True)
          (8): ReLU(inplace=True)
          (9): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (10): Linear(in_features=256, out_features=11, bias=True)
          (11): Scale()
        )
        (cls_layers): Sequential(
          (0): Linear(in_features=256, out_features=256, bias=True)
          (1): ReLU(inplace=True)
          (2): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (3): Linear(in_features=256, out_features=256, bias=True)
          (4): ReLU(inplace=True)
          (5): LayerNorm((256,), eps=1e-05, elementwise_affine=True)
          (6): Linear(in_features=256, out_features=10, bias=True)
        )
      )
    )
  )
  (grid_mask): GridMask()
)
